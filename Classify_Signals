def classifyPose(landmarks, output_image, display=False):
    '''
    This function classifies cricket umpire signals based on specific gestures and joint angles.
    Args:
        landmarks: A list of detected landmarks of the person whose pose needs to be classified.
        output_image: An image of the person with the detected pose landmarks drawn.
        display: A boolean value; if set to True, the function displays the resultant image with the signal label.
    Returns:
        output_image: The image with the detected pose landmarks drawn and signal label written.
        label: The classified signal label of the umpire in the output_image.
    '''

    # Initialize the label of the signal. It is not known at this stage.
    label = 'Unknown Signal'

    # Specify the default label color (Red).
    color = (0, 0, 255)
    
    # Calculate required angles for umpire signals.
    # --------------------------------------------------------------------------
    
    # Get the angle between left shoulder, elbow, and wrist for the left arm.
    left_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value],
                                      landmarks[mp_pose.PoseLandmark.LEFT_WRIST.value])
    
    # Get the angle between right shoulder, elbow, and wrist for the right arm.
    right_elbow_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                       landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value],
                                       landmarks[mp_pose.PoseLandmark.RIGHT_WRIST.value])

    # Get the angle between left hip, shoulder, and elbow for the left arm.
    left_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_HIP.value],
                                         landmarks[mp_pose.PoseLandmark.LEFT_SHOULDER.value],
                                         landmarks[mp_pose.PoseLandmark.LEFT_ELBOW.value])

    # Get the angle between right hip, shoulder, and elbow for the right arm.
    right_shoulder_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                          landmarks[mp_pose.PoseLandmark.RIGHT_SHOULDER.value],
                                          landmarks[mp_pose.PoseLandmark.RIGHT_ELBOW.value])
    
    left_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.LEFT_HIP.value],
                                     landmarks[mp_pose.PoseLandmark.LEFT_KNEE.value],
                                     landmarks[mp_pose.PoseLandmark.LEFT_ANKLE.value])

    # Get the angle between the right hip, knee and ankle points 
    right_knee_angle = calculateAngle(landmarks[mp_pose.PoseLandmark.RIGHT_HIP.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_KNEE.value],
                                      landmarks[mp_pose.PoseLandmark.RIGHT_ANKLE.value])
    print('Angle:',left_elbow_angle,right_elbow_angle,left_shoulder_angle, right_shoulder_angle,left_knee_angle, right_knee_angle)
    
    # --------------------------------------------------------------------------

    # Define criteria for each umpire signal.
    
    # "Six" Signal: Both arms raised straight above the head.
    if (left_elbow_angle > 130 and left_elbow_angle < 195 and 
        right_elbow_angle > 130 and right_elbow_angle < 195):
        label = "Six Signal"
        color = (0, 255, 0)  # Green for recognized signals.
    
    # "No Ball" Signal: Right arm extended horizontally at shoulder level.
    elif (right_elbow_angle > 80 and right_elbow_angle < 195 and 
          left_elbow_angle > 80 and left_elbow_angle < 195 and 
          right_shoulder_angle > 10 and right_shoulder_angle < 100 and left_shoulder_angle < 40):
        label = "No Ball Signal"
        color = (0, 255, 0)
        #"No Ball" Signal: left arm extended horizontally at shoulder level
        elif (left_elbow_angle > 80 and left_elbow_angle < 195 and 
          right_elbow_angle > 80 and right_elbow_angle < 195 and 
          left_shoulder_angle > 10 and left_shoulder_angle < 100 and right_shoulder_angle < 40):
        label = "No Ball Signal"
        color = (0, 255, 0)
    
    # "Wide" Signal: Both arms extended horizontally at shoulder level.
    elif (left_elbow_angle > 80 and left_elbow_angle < 110 and 
          right_elbow_angle > 80 and right_elbow_angle < 110 and 
          left_shoulder_angle > 80 and left_shoulder_angle < 110 and 
          right_shoulder_angle > 80 and right_shoulder_angle < 110):
        label = "Wide Signal"
        color = (0, 255, 0)
    
    # --------------------------------------------------------------------------
    
    # Write the label on the output image.
    cv2.putText(output_image, label, (10, 30), cv2.FONT_HERSHEY_PLAIN, 2, color, 2)
    
    # Check if the resultant image is specified to be displayed.
    if display:
        # Display the resultant image.
        plt.figure(figsize=[10, 10])
        plt.imshow(output_image[:, :, ::-1])
        plt.title("Output Image")
        plt.axis('off')
    else:
        # Return the output image and the classified label.
        return output_image, label
